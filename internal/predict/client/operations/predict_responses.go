// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"wheely/test/internal/predict/models"
)

// PredictReader is a Reader for the Predict structure.
type PredictReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PredictReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPredictOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPredictOK creates a PredictOK with default headers values
func NewPredictOK() *PredictOK {
	return &PredictOK{}
}

/*PredictOK handles this case with default header values.

Car list
*/
type PredictOK struct {
	Payload []int64
}

func (o *PredictOK) Error() string {
	return fmt.Sprintf("[POST /predict][%d] predictOK  %+v", 200, o.Payload)
}

func (o *PredictOK) GetPayload() []int64 {
	return o.Payload
}

func (o *PredictOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PredictBody predict body
swagger:model PredictBody
*/
type PredictBody struct {

	// source
	// Required: true
	Source []models.Position `json:"source"`

	// target
	// Required: true
	Target models.Position `json:"target"`
}

// Validate validates this predict body
func (o *PredictBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PredictBody) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("positionList"+"."+"source", "body", o.Source); err != nil {
		return err
	}

	for i := 0; i < len(o.Source); i++ {

		if err := o.Source[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("positionList" + "." + "source" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (o *PredictBody) validateTarget(formats strfmt.Registry) error {

	if err := o.Target.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("positionList" + "." + "target")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PredictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PredictBody) UnmarshalBinary(b []byte) error {
	var res PredictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
